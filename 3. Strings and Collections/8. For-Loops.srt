1
00:00:01,000 --> 00:00:08,000
Now that we have the tools to make some interesting data structures, we'll look at Python's second type

2
00:00:08,000 --> 00:00:13,000
of loop construct, the for-loop. For-loops in Python correspond to what are called for-each loops in

3
00:00:13,000 --> 00:00:19,000
many other programming languages. They request items one-by-one from a collection or more strictly

4
00:00:19,000 --> 00:00:26,000
from an iterable series, but more of that later, and assign them in turn to a variable we specify.

5
00:00:26,000 --> 00:00:31,000
Let's create a collection and use a for-loop to iterate over it.

6
00:00:31,000 --> 00:00:38,000
If you iterate over dictionaries, you get the keys, which you can then use within the for-loop body to retrieve

7
00:00:38,000 --> 00:00:45,000
values. Here we define a dictionary mapping string color names to hexadecimal integer color codes.

8
00:00:45,000 --> 00:00:49,000
Note that we use the ability of the built-in print function to accept multiple arguments.

9
00:00:49,000 --> 00:00:55,000
We pass the key and the value for each color separately. See also how the color codes returned to us are in decimal.

10
00:00:55,000 --> 00:01:02,000
Now, before we put some of what we've learned together into a useful program, practice exiting the Python

11
00:01:02,000 --> 00:59:00,000
REPL with Control+Z on Windows or Control+D on Mac or Linux.

