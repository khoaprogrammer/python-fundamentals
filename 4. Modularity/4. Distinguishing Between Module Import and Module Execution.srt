1
00:00:01,000 --> 00:00:07,000
Let's organize our words module using functions. We'll move all the code, except the import statement,

2
00:00:07,000 --> 00:00:14,000
into a function called fetch_words. You do that simply by adding the def statement and indenting the code

3
00:00:14,000 --> 00:00:22,000
below it by one extra level. Save the module and reload

4
00:00:22,000 --> 00:00:34,000
the module using a fresh Python REPL. The module imports, but the words are not fetched until we call the

5
00:00:34,000 --> 00:00:50,000
fetch_words function. Alternatively, we can import our specific function.

6
00:00:50,000 --> 00:00:56,000
So far, so good. But what happens when we try to run our module directly from the operating system shell?

7
00:00:56,000 --> 00:01:03,000
Exit the REPL with Control +D on Mac or Linux or Control +Z on Windows, and run python3 passing the module

8
00:01:03,000 --> 00:01:10,000
filename words.py. No words are printed. This is because all executing the module does now is define a

9
00:01:10,000 --> 00:01:16,000
function and then immediately exit. To make a module from which we can usefully import functions into the

10
00:01:16,000 --> 00:01:21,000
REPL, and which can be run as a script, we need to learn a new Python idiom.

11
00:01:21,000 --> 00:01:27,000
The Python runtime system defines some special variables and attributes, the names of which are delimited by

12
00:01:27,000 --> 00:01:34,000
double underscores. One such variable is called __name__ and gives us the means for our module to detect

13
00:01:34,000 --> 00:01:39,000
whether it has been run as a script or imported into another module or the REPL.

14
00:01:39,000 --> 00:01:48,000
To see how, add print__name__ at the end of your module, outside the fetch_words function.

15
00:01:48,000 --> 00:01:54,000
First of all, let's import the modified words module back into the REPL with import words.

16
00:01:54,000 --> 00:02:00,000
We can see that when imported, double underscore name does indeed evaluate to the module's name.

17
00:02:00,000 --> 00:02:07,000
As a brief aside, if we import the module again, the print statement will not be executed.

18
00:02:07,000 --> 00:02:14,000
Module code is only executed once on first import. Now, let's try running the module as a script with

19
00:02:14,000 --> 00:02:22,000
python3 words.py. Now the special name variable is equal to the string __main__, which is also delimited

20
00:02:22,000 --> 00:02:28,000
by double underscores. Our module can use this behavior to detect how it is being used.

21
00:02:28,000 --> 00:02:33,000
We replaced the print statement with an if statement, which tests the value of double underscore

22
00:02:33,000 --> 00:02:39,000
name (__name__), and if it is equal to double underscore main (__main__), executes our function.

23
00:02:39,000 --> 00:02:43,000
Now we can safely import our module without unduly executing our function.

24
00:02:43,000 --> 00:59:00,000
And we can usefully run our function as a script.

