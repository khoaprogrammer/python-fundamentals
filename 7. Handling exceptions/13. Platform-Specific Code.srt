1
00:00:01,000 --> 00:00:07,000
Detecting a single keypress from Python such as the press any key to continue functionality at the console

2
00:00:07,000 --> 00:00:12,000
requires use of operating system specific modules. We can't use the built-in input function because

3
00:00:12,000 --> 00:00:16,000
that waits for the user to press Return before giving us a string.

4
00:00:16,000 --> 00:00:22,000
To implement this on Windows, we need to use functionality from the Windows only msvcrt module, and on

5
00:00:22,000 --> 00:00:29,000
Linux and Mac OS X we need to use functionality from the Unix only tty and termios modules in addition to

6
00:00:29,000 --> 00:00:33,000
the sys module.

7
00:00:33,000 --> 00:00:38,000
This example is quite instructive as it demonstrates many Python language features including import

8
00:00:38,000 --> 00:00:46,000
and def as statements as opposed to declarations. Recall the top level module code is executed on first import.

9
00:00:46,000 --> 00:00:52,000
Within the first try block we attempt to import msvcrt, the Microsoft Visual C runtime.

10
00:00:52,000 --> 00:00:59,000
If this succeeds, we then proceed to define a function getkey(), which delegates to the msvcrt.getch()

11
00:00:59,000 --> 00:01:04,000
function. Even though we are inside a try block at this point, the function will be declared at the current

12
00:01:04,000 --> 00:01:11,000
scope, which is the module scope. If, however, the import of msvcrt fails because we're not running on

13
00:01:11,000 --> 00:01:16,000
Windows, an ImportError will be raised, and execution will transfer to the except block.

14
00:01:16,000 --> 00:01:20,000
This is a case of an error being silenced explicitly because we're going to attempt an alternative course

15
00:01:20,000 --> 00:01:26,000
of action in the exception handler. Within the except block we import three modules needed for a getkey()

16
00:01:26,000 --> 00:01:31,000
implementation on Unix-like systems, and then proceed to the alternative definition of getkey(), which

17
00:01:31,000 --> 00:01:36,000
again binds the function implementation to a name in the module scope.

18
00:01:36,000 --> 00:01:41,000
This Unix implementation of getkey() uses a tryâ€¦finally construct to restore various terminal attributes

19
00:01:41,000 --> 00:01:46,000
after the terminal has been put into raw mode for the purposes of reading a single character.

20
00:01:46,000 --> 00:01:51,000
In the event that our program is running on neither Windows nor a Unix-like system, the import tty statement

21
00:01:51,000 --> 00:01:56,000
will raise a second import error. This time we make no attempt to intercept this exception.

22
00:01:56,000 --> 00:02:02,000
We allow it to propagate to our caller, which is whatever attempted to import this keypress module.

23
00:02:02,000 --> 00:02:06,000
We know how to signal this error, but not how to handle it, so we defer that decision to our caller.

24
00:02:06,000 --> 00:02:12,000
The error will not pass silently. If the caller has more knowledge or alternative tactics available,

25
00:02:12,000 --> 00:02:16,000
it can in turn intercept this exception and take appropriate action, perhaps degrading to using Python's

26
00:02:16,000 --> 00:59:00,000
input built-in function and giving a different message to the user.

