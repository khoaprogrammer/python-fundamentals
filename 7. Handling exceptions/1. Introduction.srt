1
00:00:01,000 --> 00:00:06,000
Hello. My name is Austin Bingham. Welcome to the sixth module of the Python Fundamentals course where

2
00:00:06,000 --> 00:00:09,000
we introduce exception handling techniques.

3
00:00:09,000 --> 00:00:14,000
Exception handling is a mechanism for stopping normal program flow and continuing at some surrounding

4
00:00:14,000 --> 00:00:16,000
context or code block.

5
00:00:16,000 --> 00:00:20,000
The event of interrupting normal flow is called the act of raising an exception.

6
00:00:20,000 --> 00:00:25,000
In some enclosing context the raise exception must be handled upon which control flow if transferred

7
00:00:25,000 --> 00:00:31,000
to the exception handler. If an exception propagates up the call stack to the start of the program, then

8
00:00:31,000 --> 00:00:36,000
an unhandled exception will cause the program to terminate. And exception object containing information

9
00:00:36,000 --> 00:00:40,000
about where and why an exceptional event occurred is transported from the point at which the exception

10
00:00:40,000 --> 00:00:45,000
was raised to the exception handler so that the handler can interrogate the exception object and take

11
00:00:45,000 --> 00:00:47,000
appropriate action.

12
00:00:47,000 --> 00:00:52,000
If you've used exceptions in other popular imperative languages like C++ or Java, then you've already

13
00:00:52,000 --> 00:00:55,000
got a good idea of how exceptions work in Python.

14
00:00:55,000 --> 00:01:00,000
There have been long and tiresome debates over exactly what constitutes an exceptional event, the core

15
00:01:00,000 --> 00:01:05,000
issue being that exceptionality is in reality a matter of degree, some things are more exceptional than

16
00:01:05,000 --> 00:01:10,000
others, whereas programming languages impose a false dichotomy by insisting that an event is entirely

17
00:01:10,000 --> 00:01:15,000
exceptional or not at all exceptional. The Python philosophy is at the liberal end of the spectrum when

18
00:01:15,000 --> 00:01:20,000
it comes to the use of exceptions. Exceptions are ubiquitous in Python, and it's crucial to understand

19
00:01:20,000 --> 00:59:00,000
how to handle them.

