1
00:00:01,000 --> 00:00:08,000
Now that we're confident with the control flow for exception behavior, we can remove the print statements.

2
00:00:08,000 --> 00:00:14,000
But now when we try to import our program, we get yet another type of exception, an IndentationError because

3
00:00:14,000 --> 00:00:19,000
our except block is now empty, and empty blocks are not permitted in Python programs.

4
00:00:19,000 --> 00:00:23,000
This is not an exception type that is ever useful to catch with an except block.

5
00:00:23,000 --> 00:00:27,000
Almost anything that goes wrong with the Python program results in an exception, but some such as

6
00:00:27,000 --> 00:00:32,000
IndentationError, SyntaxError, and NameError are the result of programmer errors, which should be

7
00:00:32,000 --> 00:00:36,000
identified and corrected during development rather than handled at runtime.

8
00:00:36,000 --> 00:00:41,000
The fact that these things are exceptions is mostly useful if you're creating a Python development tool

9
00:00:41,000 --> 00:00:46,000
such as a Python IDE, embedding Python itself in a larger system to support application scripting, or

10
00:00:46,000 --> 00:00:50,000
designing a plug-in system, which dynamically loads code.

11
00:00:50,000 --> 00:00:53,000
With that said, we still have the problem of what to do with our empty except block.

12
00:00:53,000 --> 00:00:59,000
The solution arrives in the form of the pass keyword, which is a special statement which does precisely nothing.

13
00:00:59,000 --> 00:01:04,000
It's a NOOP, and its only purpose is to allow us to construct syntactically permissible blocks which are

14
00:01:04,000 --> 00:01:10,000
semantically empty. Perhaps in this case though it would be better to simplify further and just use multiple

15
00:01:10,000 --> 00:01:15,000
return statements and do away with the X variable completely.

16
00:01:15,000 --> 00:01:20,000
Sometimes we'd like to get ahold of the exception object, in this case an object of type ValueError or TypeError

17
00:01:20,000 --> 00:01:25,000
and interrogate it for more details of what went wrong. We can get a named reference to the exception object

18
00:01:25,000 --> 00:01:32,000
by tacking an as clause onto the end of the except statement.

19
00:01:32,000 --> 00:01:37,000
We'll modify our function to print a message with exception details to the standard error stream before

20
00:01:37,000 --> 00:01:42,000
returning. To print a standard error, we need to get a reference to the stream from the sys module, so at

21
00:01:42,000 --> 00:01:49,000
the top of our module we'll need to import sys. We can then pass sys.stderr as a keyword argument called

22
00:01:49,000 --> 00:01:54,000
file to the print function. We take advantage of the fact that exception objects can be converted to strings

23
00:01:54,000 --> 00:01:59,000
using the str constructor.

24
00:01:59,000 --> 00:59:00,000
Now let's see that at the REPL.

