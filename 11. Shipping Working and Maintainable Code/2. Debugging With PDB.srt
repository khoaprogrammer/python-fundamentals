1
00:00:01,000 --> 00:00:06,000
Even with a comprehensive automated test suite, we can still get into situations where we need a debugger

2
00:00:06,000 --> 00:00:13,000
to figure out what's going on. Fortunately Python includes a powerful debugger with the Standard Library, PDB.

3
00:00:13,000 --> 00:00:17,000
PDB is a command-line debugger, and if you're familiar with tools like GDB, then you'll already have a

4
00:00:17,000 --> 00:00:23,000
good idea of how to use PDB. PDB is different from many debugging tools in that it's not really a separate

5
00:00:23,000 --> 00:00:29,000
program, but a module just like any other Python module. You can import PDB into any program and start the

6
00:00:29,000 --> 00:00:33,000
debugger using the set_trace() function call. This function simply starts the debugger at whatever

7
00:00:33,000 --> 00:00:37,000
point you are at in the program's execution.

8
00:00:37,000 --> 00:00:41,000
For our look at PDB, let's use a REPL and start the debugger with set_trace().

9
00:00:41,000 --> 00:00:46,000
You'll see that even after you execute set_trace() you're prompt changes from the triple chevron to PDB

10
00:00:46,000 --> 00:00:50,000
in parentheses. This is how you know you're in the debugger.

11
00:00:50,000 --> 00:00:56,000
The first thing we'll do is simply see what commands are available in the debugger by typing help.

12
00:00:56,000 --> 00:01:00,000
This lists a few dozen commands, some of which you will use in almost every debugging session, and some

13
00:01:00,000 --> 00:01:08,000
of which you may never use at all. You can get specific help on a command by typing help followed by the command name.

14
00:01:08,000 --> 00:01:15,000
For example, to see what continue does, type help continue. The curious parentheses in the command tell

15
00:01:15,000 --> 00:01:21,000
you that continue can be activated by typing C, C-O-N-T, or the full word continue.

16
00:01:21,000 --> 00:01:27,000
Knowing the shortcuts for common PDB commands can greatly increase your comfort and speed at debugging.

17
00:01:27,000 --> 00:01:33,000
Rather than simply list all of the commonly useful PDB commands, we're going to instead debug a simple function.

18
00:01:33,000 --> 00:01:38,000
Our function, is_palindrome(), takes in an integer and determines if the digits of the integer are a palindrome

19
00:01:38,000 --> 00:01:45,000
or not. A palindrome of course is a sequence, which is the same both forwards and backwards.

20
00:01:45,000 --> 00:01:50,000
The first thing we'll do is create a new file, palindrome.py, with this code.

21
00:01:50,000 --> 00:01:55,000
As you can see, our code has three main parts. The first is the digits function, which converts an integer

22
00:01:55,000 --> 00:02:01,000
into a list of digits. The second is the is_palindrome function, which first calls digits and then checks

23
00:02:01,000 --> 00:02:05,000
if the resulting list is a palindrome. The third part is a set of unit tests.

24
00:02:05,000 --> 00:02:11,000
We'll use these tests to drive the program. As you might expect, since this is a section on debugging, there's

25
00:02:11,000 --> 00:02:16,000
a bug in this code. We're going to first run the program and notice the bug, and then we'll see how to use PDB

26
00:02:16,000 --> 00:02:18,000
to find the bug.

27
00:02:18,000 --> 00:02:22,000
So, let's simply run the program. We have three tests that we expect to run, and since this is a relatively

28
00:02:22,000 --> 00:02:28,000
simple program, we expect it to run very quickly. Instead of running quickly, we see that this program

29
00:02:28,000 --> 00:02:34,000
seems to run forever. And if you look at its memory usage, you'll also see that it grows in size the longer

30
00:02:34,000 --> 00:02:44,000
it runs. Clearly something is wrong, so let's use Control+C to kill the program.

31
00:02:44,000 --> 00:02:49,000
We'll now use PDB to try to understand what's going on here. Since we don't know where our problem might

32
00:02:49,000 --> 00:02:55,000
lie, we don't know where to put a set_trace call, so we're going to instead start the program under the control

33
00:02:55,000 --> 00:03:02,000
of pdb using a command line invocation. Here we're using the -m argument, which tells Python to execute

34
00:03:02,000 --> 00:03:08,000
the specific module, in this case pdb, as a script. The remaining arguments are passed to that script.

35
00:03:08,000 --> 00:03:13,000
So, here we're telling Python to execute the pdb module as a script, and we're passing the name of our broken

36
00:03:13,000 --> 00:03:19,000
file to it. What we're seeing is that we're immediately taken to a (Pbd) prompt.

37
00:03:19,000 --> 00:03:24,000
The arrow pointing to import unittest is telling us that this is the next instruction that will be executed

38
00:03:24,000 --> 00:03:30,000
when we continue, but where is that instruction? Let's use the where command to find out.

39
00:03:30,000 --> 00:03:35,000
Where reports our current call stack with the most recent frames at the bottom, and we can see that PDB has

40
00:03:35,000 --> 00:03:41,000
paused execution at the very first line of palindrome.py. This reinforces an important aspect of Python

41
00:03:41,000 --> 00:03:46,000
execution, which we've discussed before. Everything is evaluated at runtime.

42
00:03:46,000 --> 00:03:50,000
In this case, we've paused execution right before an import statement.

43
00:03:50,000 --> 00:03:54,000
We can execute this import by running to the next statement using the next command.

44
00:03:54,000 --> 00:03:58,000
We see that this takes us to the def call for the digits function.

45
00:03:58,000 --> 00:04:03,000
When we execute another next, we move to the definition of the is_palindrome function.

46
00:04:03,000 --> 00:04:06,000
You may be wondering why the debugger didn't step into the body of digits.

47
00:04:06,000 --> 00:04:10,000
After all, isn't it evaluated at runtime like everything else?

48
00:04:10,000 --> 00:04:15,000
The answer is that the body of the function can only be evaluated when there are arguments supplied to it,

49
00:04:15,000 --> 00:04:20,000
so it will only be run when the function is called. The body of functions are checked for proper syntax when

50
00:04:20,000 --> 00:04:25,000
they are imported, but PDB doesn't let us debug that part of the process.

51
00:04:25,000 --> 00:04:29,000
We could continue using next to move through our program's execution, but since we don't know where the

52
00:04:29,000 --> 00:04:35,000
bug lies, this might not be a very useful technique. Instead, remember that the problem with our program

53
00:04:35,000 --> 00:04:39,000
is that it seemed to be running forever. This sounds a lot like an infinite loop.

54
00:04:39,000 --> 00:04:43,000
So, rather than stepping through our code, we'll simply let it execute, and then we'll use Control+C to

55
00:04:43,000 --> 00:04:50,000
break back into the debugger when we think it might be in that loop.

56
00:04:50,000 --> 00:04:54,000
After letting the program run for a few seconds, we press Control+C, which halts the program and shows

57
00:04:54,000 --> 00:05:01,000
us that we're in the digits() function of palindrome.py. If we want to see the source code at that line,

58
00:05:01,000 --> 00:05:07,000
we can use the PDB command list. We see that this is indeed inside a loop, which confirms our suspicion that

59
00:05:07,000 --> 00:05:13,000
an infinite loop might be involved. We can use the return command to try to run to the end of the current function.

60
00:05:13,000 --> 00:05:19,000
If this doesn't return, we'll have very strong evidence that this is an infinite loop.

61
00:05:19,000 --> 00:05:25,000
We let this run for a few seconds to confirm that we never exit the function, and then we press Control+C.

62
00:05:25,000 --> 00:05:32,000
Once we get back to a (Pdb) prompt, let's exit PDB with the quit command.

63
00:05:32,000 --> 00:05:37,000
Since we know the problem lies in digits, let's set an explicit breakpoint in there using the pdb.set_trace

64
00:05:37,000 --> 00:05:45,000
function mentioned earlier. Remember that the set_trace function will halt execution and enter the debugger.

65
00:05:45,000 --> 00:05:51,000
So, now we can just execute our script without specifying the PDB module, and we see that we almost immediately

66
00:05:51,000 --> 00:05:56,000
go to a (Pdb) prompt with execution halted at the beginning of our digits function.

67
00:05:56,000 --> 00:06:00,000
To verify that we know where we are, let's use where to see our call stack.

68
00:06:00,000 --> 00:06:03,000
Remember that the most recent frames are at the end of this listing.

69
00:06:03,000 --> 00:06:07,000
After a lot of unit test functions, we see that we are indeed in the digits() function and that it was called

70
00:06:07,000 --> 00:06:14,000
by is_palindrome just as we expected. What we want to do now is watch execution and see why we never exit

71
00:06:14,000 --> 00:06:19,000
the function's loop. Let's use next to move to the first line of the loop body.

72
00:06:19,000 --> 00:06:23,000
Now let's look at the value of some of our variables and try to decide what we expect to happen.

73
00:06:23,000 --> 00:06:28,000
We can examine values by using the print command. This looks correct.

74
00:06:28,000 --> 00:06:34,000
The digs list, which will contain the sequence of digits in the end, is empty, and X is what we passed in.

75
00:06:34,000 --> 00:06:38,000
We expect the divmod function to return 123 and 4, so let's try that.

76
00:06:38,000 --> 00:06:43,000
This looks correct. Divmod has clipped off the least significant digit from our number, and the next line

77
00:06:43,000 --> 00:06:51,000
puts that digit into our result's list. If we look at digs, we'll see that it now contains mod.

78
00:06:51,000 --> 00:06:56,000
The next line will now update X so that we can continue clipping digits from it.

79
00:06:56,000 --> 00:07:00,000
We see that execution goes back up to the while loop as we expected.

80
00:07:00,000 --> 00:07:03,000
Let's look at X to make sure it has the right value. Wait a second.

81
00:07:03,000 --> 00:07:07,000
We expect X to hold the digits that aren't already in the result's list.

82
00:07:07,000 --> 00:07:14,000
Instead, it contains only the digit in the result's list. Clearly we've made a mistake in updating X.

83
00:07:14,000 --> 00:07:20,000
If we look at our code, it quickly becomes apparent that we should have assigned div rather than mod to X.

84
00:07:20,000 --> 00:07:25,000
Let's exit PDB. Note that you may have to run quit a few times because of how PDB

85
00:07:25,000 --> 00:07:31,000
and unit tests interact. After you're out of PDB, let's remove the set_trace call and modify digits to

86
00:07:31,000 --> 00:07:35,000
fix the problem we found.

87
00:07:35,000 --> 00:07:41,000
If we run our program now, we see that we're passing all tests, and it runs very quickly.

88
00:07:41,000 --> 00:07:45,000
That's a basic PDB session, and it demonstrates some of the core features of PDB.

89
00:07:45,000 --> 00:07:50,000
PDB has many other commands and features, however, and the best way to learn them is to simply start using

90
00:07:50,000 --> 00:07:55,000
PDB and trying out the commands. This palindrome program can serve as a good example for learning most

91
00:07:55,000 --> 00:59:00,000
of the features of PDB.

