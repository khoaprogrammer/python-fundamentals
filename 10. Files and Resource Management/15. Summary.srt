1
00:00:01,000 --> 00:00:07,000
Let's summarize what we've covered in this module. Files are opened using the built-in open() function,

2
00:00:07,000 --> 00:00:12,000
which accepts a file mode. This controls read/write/append behavior and also whether the file is treated

3
00:00:12,000 --> 00:00:20,000
as binary or encoded text data. For text data, it's good practice to always specify an encoding.

4
00:00:20,000 --> 00:00:25,000
Text files differ from binary files by dealing with string objects and performing universal newline

5
00:00:25,000 --> 00:00:34,000
translation and string encoding. Binary files deal with bytes objects with no newline translation or encoding.

6
00:00:34,000 --> 00:00:40,000
When you write text files, it's up to us to provide newline characters for line breaks.

7
00:00:40,000 --> 00:00:44,000
Files should always be closed after use to prevent resource leaks and to ensure that all data has been committed

8
00:00:44,000 --> 00:00:52,000
to the file system. Files provide various convenient methods for working with lines, but are also iterators,

9
00:00:52,000 --> 00:00:59,000
which yield values line-by-line. Files are also context mangers and can be used with the with-statement.

10
00:00:59,000 --> 00:01:04,000
This ensures that cleanup operations such as closing the files are performed.

11
00:01:04,000 --> 00:01:09,000
The notion of file-like objects is loosely defined, but very useful in practice.

12
00:01:09,000 --> 00:01:15,000
Exercise easier to ask forgiveness than permission to make the most of them.

13
00:01:15,000 --> 00:01:20,000
Context managers aren't restricted to file-like objects. We can use the tools in the contextlib standard

14
00:01:20,000 --> 00:01:25,000
library module such as the closing() wrapper to create our own context managers.

15
00:01:25,000 --> 00:01:31,000
Along the way in this module we found that help() can be used on instance objects, not just types, and Python

16
00:01:31,000 --> 00:01:38,000
supports bitwise operators bitwise &amp;, bitwise or, and left- and right-bitwise shifts.

17
00:01:38,000 --> 00:01:43,000
We've given you some powerful tools in this module for getting data into and out of your programs.

18
00:01:43,000 --> 00:01:49,000
Next time we'll look at how to make your programs correct with debuggers, reliable with unit testing,

19
00:01:49,000 --> 00:01:54,000
and deployable to other computers and people with packaging. Thanks for watching, and we hope to see you

20
00:01:54,000 --> 00:59:00,000
in the next and last module.

