1
00:00:01,000 --> 00:00:06,000
The culmination of these increasingly sophisticated text file reading tools is the fact that file objects

2
00:00:06,000 --> 00:00:11,000
support the iterator protocol with each iteration yielding the next line in the file.

3
00:00:11,000 --> 00:00:17,000
This means they can be used in for loops and any other place where an iterator can be used.

4
00:00:17,000 --> 00:00:22,000
At this point, we'll take the opportunity to create a Python module, files.py.

5
00:00:22,000 --> 00:00:28,000
We'll use this to contain the code for the following example. When run, this program opens the filename

6
00:00:28,000 --> 00:00:34,000
passes its command line argument, and iterates over the file with a for loop line-by-line printing each

7
00:00:34,000 --> 00:00:38,000
line as it goes. Let's run this program directly from the system

8
00:00:38,000 --> 00:00:45,000
command line passing the name of our text file wasteland.txt. The double line spacing occurs because

9
00:00:45,000 --> 00:00:51,000
each line of the poem is terminated by a newline, and then print adds its own.

10
00:00:51,000 --> 00:00:58,000
To fix that we could use the strip method to remove the whitespace from the end of each line prior to printing.

11
00:00:58,000 --> 00:01:02,000
Instead, we'll use the write method of the standard out stream.

12
00:01:02,000 --> 00:01:06,000
This is exactly the same write method used to write to the file.

13
00:01:06,000 --> 00:01:12,000
Files and streams are closely related and can be used because the stream is a file-like object.

14
00:01:12,000 --> 00:01:21,000
We can get hold of a reference to the standard out stream from the sys module.

15
00:01:21,000 --> 00:01:28,000
Rerunning, we now get single-space text. Now alas it's time to move on from one of the most important poems

16
00:01:28,000 --> 00:59:00,000
of the 20th century and get to grips with context managers.

