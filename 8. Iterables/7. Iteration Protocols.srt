1
00:00:02,000 --> 00:00:07,000
Comprehensions and for loops are the most frequently used language features for performing iteration.

2
00:00:07,000 --> 00:00:12,000
That is, taking items one-by-one from a source and doing something with each in turn.

3
00:00:12,000 --> 00:00:18,000
However, both comprehensions and for loops iterate over the whole sequence by default whereas sometimes

4
00:00:18,000 --> 00:00:23,000
more fine-grain control is needed. There are two important concepts here on which

5
00:00:23,000 --> 00:00:30,000
a great deal of Python language behavior is constructed, iterable objects and iterator objects, both

6
00:00:30,000 --> 00:00:37,000
of which are reflected in standard Python protocols. The iterable protocol allows us to pass an iterable

7
00:00:37,000 --> 00:00:43,000
object, usually a collection or stream of objects such as a list, to the built-in iter() function to get

8
00:00:43,000 --> 00:00:51,000
an iterator for the iterable object. Iterator objects support the iterator protocol, which requires

9
00:00:51,000 --> 00:00:57,000
that we can pass the iterator object to the built-in next() function to fetch the next value from the underlying

10
00:00:57,000 --> 00:00:59,000
collection.

11
00:00:59,000 --> 00:01:04,000
As usual, a demonstration at the Python REPL will help all these concepts crystalize into something you

12
00:01:04,000 --> 00:01:10,000
can work with. We'll use a list of the names of the seasons, in British-English no less, as our iterable

13
00:01:10,000 --> 00:01:21,000
source object. We ask our iterable object to give us an iterator using the built-in iter function, and

14
00:01:21,000 --> 00:01:26,000
then request a value from the iterator using the next function.

15
00:01:26,000 --> 00:01:35,000
Each call to next moves the iterator through the sequence returning Spring, Summer, Autumn, and Winter.

16
00:01:35,000 --> 00:01:41,000
But what happens when we reach the end? In a spectacular display of Python's liberal attitude to errors,

17
00:01:41,000 --> 00:01:46,000
Python raises an exception, specifically of the type StopIteration.

18
00:01:46,000 --> 00:01:50,000
Those of you coming from other programming languages with a more straight-laced approach to exceptions

19
00:01:50,000 --> 00:01:55,000
may find this mildly outrageous, but I ask you what could be more exceptional than reaching the end of a

20
00:01:55,000 --> 00:02:01,000
collection? It only has one end after all. This attempt at rationalizing the language design decision

21
00:02:01,000 --> 00:02:06,000
makes even more sense when one considers that the iterable series may be a potentially infinite stream

22
00:02:06,000 --> 00:02:12,000
of data. Reaching the end in that case really would be something to write home about or indeed raise an exception

23
00:02:12,000 --> 00:02:14,000
for.

24
00:02:14,000 --> 00:02:19,000
With for loops and comprehensions at our fingertips, the utility of these lower-level iteration protocols

25
00:02:19,000 --> 00:02:25,000
may not be obvious. To demonstrate a more concrete use, here's a little utility function, which when passed

26
00:02:25,000 --> 00:02:34,000
an iterable object returns the first item from that series, or if the series is empty raises a ValueError.

27
00:02:34,000 --> 00:02:48,000
This works as expected on any iterable object, in this case demonstrated on both a list and a set.

28
00:02:48,000 --> 00:02:53,000
It's worth noting that the higher-level iteration constructs such as for loops and comprehensions are

29
00:02:53,000 --> 00:59:00,000
built directly upon this lower-level iteration protocol.

