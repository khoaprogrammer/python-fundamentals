1
00:00:01,000 --> 00:00:07,000
Laziness and the Infinite. Generators are lazy meaning that computation only happens just in time when

2
00:00:07,000 --> 00:00:13,000
the next result is requested. This interesting and useful property of generators means that they can

3
00:00:13,000 --> 00:00:19,000
be used to model infinite sequences. Since values are only produced as requested by the caller and since

4
00:00:19,000 --> 00:00:24,000
no data structure needs to be built to contain the elements of the sequence, generators can safely be used

5
00:00:24,000 --> 00:00:31,000
to produce never ending or just very large sequences like sensor readings, mathematical sequences such

6
00:00:31,000 --> 00:00:38,000
as primes or factorials, or perhaps the contents of multi-terabyte files.

7
00:00:38,000 --> 00:00:44,000
The authors of this course are sworn by sacred oath never to use either Fibonacci or quick sort implementations

8
00:00:44,000 --> 00:00:50,000
in demonstrations or exercises. Allow us to present the function for the lucas() series, which has nothing

9
00:00:50,000 --> 00:00:54,000
whatsoever to do with the order in which you should watch the episodes of Star Wars.

10
00:00:54,000 --> 00:01:01,000
The lucas() series starts with 2 and 1, and each value after that is the sum of the two preceding values.

11
00:01:01,000 --> 00:01:09,000
So, the first few values of the sequence are 2, 1, 3, 4, 7, and 11.

12
00:01:09,000 --> 00:01:16,000
The first yield produces the value 2. The function then initializes A and B, which hold the previous two

13
00:01:16,000 --> 00:01:23,000
values needed as the function proceeds. Then the function enters an infinite while loop where first it

14
00:01:23,000 --> 00:01:30,000
yields the value of B, and then second A and B are updated to hold the new previous two values using a neat

15
00:01:30,000 --> 00:01:37,000
application of tuple unpacking. Now that we have the lucas() generator, it can be used like any other iterable

16
00:01:37,000 --> 00:01:42,000
object. For instance, to print the lucas numbers you could use a loop like this:

17
00:01:42,000 --> 00:01:50,000
For x in lucas() print (x). Of course since the lucas sequence is infinite, this will run forever printing

18
00:01:50,000 --> 00:59:00,000
out values until your computer runs out of memory. Use Control+C to terminate the loop.

